#!(generic "foo")
###############################################################################
# comparable.fo
#
# The Programmer - Leevi, @2012-06-24. Happy Birthday.
# C-Lab, Nirl Studio 2011-2013, All Rights Reserved.
#
###############################################################################
# 0, to define and implement generic operations for 'comparable'.
($impl comparable 
    # 1, a customizable operation for any 'comparable' entities.
    # 1.0, 'comparable' has provided a default implementation for 'compare',
    # 1.1, 'hint' is reserved for overriden implementation to use.
    (compare (= (! other:package hint) ?compared
        (when 
            ( (this:is other)  EQUAL)
            ( (this:is null )  LESS )
            ( (other:is null)  GREAT)
            ( else             LESS )
    -)
    #
    # 2, operators depending on 'comparable:compare'.
    # 2.0, 'gt' means 'great than' or '>'.
    (gt (= (! other:package hint) ?bool
        ((this:compare other hint):equal GREAT)
    -)
    # 2.1, 'ge' means 'great than or equal to' or '>='.
    (ge (= (! other:package hint) ?bool
        ((this:compare other hint):not_equal LESS)
    -)
    # 2.2, 'lt' means 'less than' or '<'.
    (lt (= (! other:package hint) ?bool
        ((this:compare other hint):equal LESS)
    -)
    # 2.3, 'le' means 'less than or equal to' or '<='.
    (le (= (! other:package hint) ?bool
        ((this:compare other hint):not_equal GREAT)
    -)
    # 2.4, 'eq' means 'equal to' or '=='.
    (eq (= (! other:package hint) ?bool
        ((this:compare other hint):equal EQUAL)
    -)
    # 2.5, 'neq' means 'not equal to' or '!='.
    (neq (= (! other:package hint) ?bool
        ((this:compare other hint):not_equal EQUAL)
    -)
    #
    # 3, to keep consistent with object's equivalence operations.
    # 3.0, if 'equal' exists, it should be equivalent to 'eq'.
    (equal (= (! other:package hint) ?bool
        (this:eq other)
    -)
    # 3.1, if 'not_equal' exists, it should be equivalent to 'neq'.
    (not_equal (= (! other:package hint) ?bool
        (this:neq other)
    -)
) ;
###############################################################################
# 3, 'compare' is an universal comparasion function.
(decl compare (= (! leftv:package rightv:package) ?compared
    (when 
        ( (leftv:is    rightv)      EQUAL)
        ( (leftv:as    comparable)  (leftv:compare rightv -)
        ( (leftv:is    null)        LESS )
        ( (rightv:is   null)        GREAT)
        ( (leftv:equal rightv)      EQUAL)
        ( else                      LESS )
);
###############################################################################
# 4, common operations based on 'comparable'.
# 4.0, 'max' is used to find out the maximal value from arguments.
# 4.0.0, 'max' will return the first occurence for equavilent values.
# 4.0.1, 'max' will return the front value for uncertain situation.
(decl max (= (! item:package *) ?package 
    (foreach item in args 
        (if (item:gt last) item else last -)
);
# 4.1, 'min' is used to find out the minimal value from arguments.
# 4.1.0, 'min' will return the first occurence for equavilent values.
# 4.1.1, 'min' will return the front value for uncertain situation.
(decl min (= (! item:package *) ?package
    (foreach item in args 
        (if (last:gt item) last else item -)
);
###############################################################################
