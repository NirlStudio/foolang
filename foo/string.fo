#!(generic "foo")
###############################################################################
# string.fo
#
# The Programmer - Leevi, @2012-06-24. Happy Birthday.
# C-Lab, Nirl Studio 2011-2013, All Rights Reserved.
#
###############################################################################
# 0, to define the operations of 'string'.
($impl string
    # 1, constructor of 'string'.
    # 1.0, 'string' can combine a series of string or char to a new string.
    (string (= (! value:char|string *) ?string -)
    # 1.1, 'of' works like 'string:string', but can insert a separator between items.
    # 1.2, the 'separator' may be a 'char' or a 'string'.
    (of (= (! separator:char|string?' ' value:char|string *) ?string -)
    # 1.3, 'concat' works like 'of', but accepts a 'list' of values.
    # 1.4, the items in 'values' would be converted to strings.
    (concat (= (! values:list separator:char|string?' ' *) ?string -)
    #
    # 2, common operations of 'string'.
    # 2.0, ':format' uses the owner string as a formatting pattern.
    # 2.1, ':format' will produce a new string.
    (:format (= (! value *) ?string ,
    # 2.2, ':split' will split the string to a series of sub-strings.
    # 2.3, ':split' returns an array of strings.
    # 2.4, ':split' returns 'array:empty' if none is found.
    # 2.5, ':split' will return an 'iterator' if 'as_iterator' set to true.
    (:split  (= (! separator:char|string?' '
                  omit_empty:bool?false
                 as_iterator:bool?false) ?array|iterator
    -)
    # 2.6, ':encode' will encode the string to a 'data' object.
    # 2.7, ':encode' will return null if the 'enc_name' is not supported.
    (:encode (= (! enc_name:string?"utf-8") ?data -)
    # 2.8, overridden ':append' will accept both 'char' and 'string' as arguments.
    (:append (= (! value:char|string *) ?string -)
) ;
###############################################################################
