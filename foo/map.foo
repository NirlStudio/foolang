#!foo
###############################################################################
# map.foo
#
# The Programmer - Leevi, @2013-02-17. Updated @2013-02-17.
# C-Lab, Nirl Studio 2011-2013, All Rights Reserved.
#
###############################################################################
#
($impl map
    #
    (of  (= (! keys:iterator values:iterator) ?map
    -)
    #
    (:cas  (= (! key refer value) ?map
        (if (refer:is value)
            (return this)
        else
            (this:put key value)
    -)
    #
    ($cas  (= (! key refer value) ?map
        (if (refer:is value)
            (return this)
        else
            (this:put key value)
    -)
    #
    ($join  (= (! other:map *) ?map
        (with this
            (foreach other in args
                (for (key value) in other
                    (last:put key value)
    -)
    #
    (:triage  (= (! func:function *) ?(map *) (*
        (decl groups (collect
            (foreach func in args (this:clear -)
        -)
        (for (key value) in this
            (for (index group) in groups
                (if ((argv index) key value) (* 
                    ($groups:cas index group (group:$put key value -) 
                    (break )
        -)
        (return groups)
    -)
    #
    (:assort  (= (! func:function *) ?(map *)
        (collect (foreach func in args
            (with (this:clear ) 
                (for (key value) in this
                    (if (func key value)
                        (last:put key value)
                    else
                        (continue last)
    -)
);
###############################################################################
