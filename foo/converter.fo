#!(generic "foo")
###############################################################################
# converter.fo
#
# The Programmer - Leevi, @2013-06-06.
# C-Lab, Nirl Studio 2011-2013, All Rights Reserved.
#
###############################################################################
# 0, to define and implement operations of 'converter'.
($impl converter
    # 1, the constructor of converter.
    (converter (= (! src:iterator func:function) ?converter
        (if (src:is_not null)
            (impl 
              (this:iterator (func (src:item -)
                (_src  src )
                (_func func)
    -)
    # 2, to forward the rest count if the 'src' has it.
    (:rest (= (:_src:rest -)
    #
    # 3, overridden operations.
    (:next (= ?converter 
        (converter (:_src:next ) :_func -)
    -)
    #
    ($next (= ?converter (*
        (decl src (:_src:next -)
        (if (src:is_not null)
            (impl
              (this:iterator (func (src:item -)
                (_src  src)
    -)
    #
);
###############################################################################
