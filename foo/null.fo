#!(generic "foo")
###############################################################################
# null.fo
#
# The Programmer - Leevi, @2012-06-24, Happy Birthday.
# C-Lab, Nirl Studio 2011-2013, All Rights Reserved.
#
###############################################################################
# 0, since 'null' is not a package yet, it only has some fake members.
# 0.0, fake members can't be dynamiclly invoked, it's unnecessary too.
# 0.1, fake members can be replaced for any 'null' derivated entities by using 'decl'.
# 0.2, fake members can be overriden in all packages' descendants by using 'impl'.
# 
###############################################################################
# 1, infomation of type
# 1.0, to return the short type name for an entity.
(decl null:type_name (= ?string ;
# 1.1, to return the full type name for an entity.
(decl null:type_path (= ?string ;
#
###############################################################################
# 2, type relationship
# 2.0, 'is' will test whehter an entity is exactly another one.
(decl null:is (= (! other *) ?bool ;
# 2.1, 'is_not' is equivalent to '(not (this:is other))'.
(decl null:is_not (= (! other *) ?bool ;
# 2.2, 'as' will test whehter an entity is derivated from another one.
(decl null:as (= (! other *) ?bool ;
# 2.3, 'as_not' is equivalent to '(not (this:as other))'.
(decl null:as_not (= (! other *) ?bool ;
# 2.4, to get the most recent common ancestor of 'this' and others.
(decl null:like (= (! other *) ?* ;
# 2.5, 'unlike' is equivalent to '((this:like other):is null)'.
(decl null:unlike (= (! other *) ?bool ;
# 2.6, to get the super type for an entity.
(decl null:super (= ?* ;
#
###############################################################################
# 3, meta infomations
# 3.0, to return an integer hash-code which can be used to implement fast mapping.
(decl null:hash (= ?int ;
# 3.1, to return a piece of foo code to describe the entity.
(decl null:desc (= ?int ;
# 3.2, to return the documentation related to the entity.
(decl null:doc (= ?string ;
#
(decl null:conv (= (! type) ?*
###############################################################################
# 4, statement aliases
# 4.0, 'base' means the super type of calling function.
(def base (self:super ) ;
# 4.1, 'super' means the super type of the container of calling function.
(def super (this:super ) ;
#
###############################################################################
