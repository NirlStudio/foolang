#!(generic "foo")
###############################################################################
# map.fo
#
# The Programmer - Leevi, @2012-06-24. Happy Birthday.
# C-Lab, Nirl Studio 2011-2013, All Rights Reserved.
#
###############################################################################
# 0, to define and implement operations of 'map'.
($impl map
    # 1, the constructors of 'map'.
    # 1.0, 'map' will produce an instance saving all key-value pairs.
    (map  (= (! key value *) ?map -)
    # 1.1, 'of' will produce an instance basing on two iterable entities.
    # 1.2, 'keys' should be an iterable entity containing all keys.
    # 1.3, 'values' should be an iterable entity containing all values.
    # 1.4, the count of items will be determined by the count of keys.
    # 1.5, extra value entries will be ignored.
    # 1.6, absent value entries will be fulfilled wit null.
    (of  (= (! keys:iterator values:iterator) ?map -)
    #
    # 2, oerridden operations of collection.
    # 2.0, ':get' returns the value attached to a key.
    (:get  (= (! key) ?* -)
    # 2.1, ':put' returns a copied collection containing items in arguments.
    (:put  (= (! key value) ?map -)
    # 2.2, ':cas' attaches 'value' to 'key' if it's not 'refer'.
    # 2.3, ':cas' returns 'this' if '(value:is refer)' is true.
    (:cas  (= (! key refer value) ?map -)
    # 2.4, ':join' returns a copied map joined with a series of 'other'.
    (:join  (= (! other:map *) ?map -)
    # 2.6, for other operations inherited from 'collection', 'item' will be taken as 'key'.
    #
    # 3, taversing operation of 'map'.
    # 3.0, 'map:items' returns an 'iterator' to traverse all keys.
    # 3.1, ':values' returns an 'iterator' to traverse all values.
    (:values  (= ?iterator -)
) ;
###############################################################################

