#!(generic "foo")
###############################################################################
# triple.fo
#
# The Programmer - Leevi, @2012-12-14.
# C-Lab, Nirl Studio 2011-2013, All Rights Reserved.
#
###############################################################################
# 0, to define the structure of 'triple'.
($impl triple
    # 1, the constructor of 'triple'.
    (triple (= (! left middle right) ?triple
        (impl this
            (L left)
            (M middle)
            (R right)
    -)
    #
    # 2, the new field of 'triple'.
    (:M ?*)
    #
    # 3, overridden operations.
    # 3.0, to customize the behaviour of equivalence.
    (:_equal (= (! other:object) ?bool
        (by_default false
            (if (other:is_object triple)
                ((:L:equal other:L):and 
                    (:M:equal other:M)
                    (:R:equal other:R)
    -)
    # 3.1, to customize the operation of 'iterable'.
    (:items (= (! test:function) ?iterator
        (if (test:is null) 
            (iterate :L :M :R) 
        else (if (test :L)
            (if (test :M) 
                (if (test :R) (iterate :L :M :R) (iterate :L :M) -)
            else
                (if (test :R) (iterate :L :R) (single :L) -)
            -)
        else
            (if (test :M) 
                (if (test :R) (iterate :M :R) (single :M) -)
            else
                (if (test :R) (single :R)  -)
    -)
) ;
###############################################################################
