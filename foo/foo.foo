#!foo
###############################################################################
# foo.foo
#
# The Programmer - Leevi, @2013-02-07.
# C-Lab, Nirl Studio 2011-2013, All Rights Reserved.
#
###############################################################################
#
(decl check (= (! value type *) ?* 
    (if (value:is_not null) 
        (with value (foreach type in (argi 1)
            (if (value:as type) 
                (return value)
);
# 
(decl check_to (= (! value defaulue type *) ?*
    (if (value:is null) 
        (return defaulue)
    else
        (with value (foreach type in (argi 2)
            (if (value:as type)
                (return value)
            else
                (continue defaulue)
);
# 
(decl by_default (= (! defaulue value) ?* 
    (if (value:is null)
        (return defaulue)
    else
        (return value)
);
#
(decl convert (= (! value type *) ?*
    (if (value:is_not null)
        (foreach type in (argi 1) (*
            (decl val (value:conv type -)
            (if (val:is_not null)
                (return val)
);
#
(decl convert_to (= (! value defaulue type *) ?*
    (if (value:is null)
        (return defaulue)
    else
        (with value (foreach type in (argi 2) (*
            (decl val (value:conv type -)
            (if (val:is null)
                (continue defaulue)
             else
                (return val)
);
# 
(decl hello (= (! world:string *)
    (if (argc:lt 1)
        (print "hello, World!")
    else
        (printf "hello, %%." (string:concat args)
);
###############################################################################
