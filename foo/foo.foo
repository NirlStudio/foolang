#!foo
###############################################################################
# foo.foo
#
# The Programmer - Leevi, @2013-02-07.
# C-Lab, Nirl Studio 2011-2013, All Rights Reserved.
#
###############################################################################
#
(decl check (= (! value type *) ?* 
    (if (value:is_not null) 
        (with value (foreach type in (argi 1)
            (if (value:as type) (break value)
);
# 
(decl check_to (= (! value defaulue type *) ?*
    (if (value:is null ) 
        (return defaulue)
    else
        (with value (foreach type in (argi 2)
            (if (value:as type)
                (break value)
            else
                (continue defaulue)
);
# 
(decl by_default (= (! defaulue value) ?* 
    (if (value:is null)
        (return defaulue)
    else
        (return value)
);
#
(decl seqn_iter (+:slicer
    (seqn_iter (= (! current:numeric?0 step:numeric?1 count:int?1) (* 
        (decl :_current current)
        (decl :_step    step)
        (decl :_count   count)
    -)

    (:rest (= :_count -)

    (:item (= :_current -)

    (:next (= 
        (if (:_count:gt 1)
            (return (seqn_iter (:_current:plus step) :_step (:_count:minus 1)
    -)

    ($next (= 
        (if (:_count:le 1) 
            (return false)
        else 
        (*
            (:_current:$plus :_Step)
            (:_count:minus 1 -)
            (return true)
    -)
);

(decl seqn (= (! limit:numeric?0
                 start:numeric?0
                  step:numeric?1
              by_count:bool?false) ?iterator
    (if (step:neq 0)
        (if by_count
            (if (limit:gt 1) 
                (return (seq_iter start step (int limit)
            -)
        else 
        (*
            (decl count (int ((limit:minus start):div step -)
            (if (count:gt 0)
                (return (seqn_iter start step count)
);
# 
(decl hello (= (! &world:string *)
    (if (argc:le 0)
        (print "hello, World.")
    else
        (printf "hello, %%." (concat ' ' args)
) ;
###############################################################################
