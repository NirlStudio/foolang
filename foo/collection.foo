#!foo
###############################################################################
# collection.foo
#
# The Programmer - Leevi, @2013-02-17.
# C-Lab, Nirl Studio 2011-2013, All Rights Reserved.
#
###############################################################################
#
($impl
    #
    (:_equal  (= (! other:object) ?bool
        (by_default false 
            (if ((other:is_object collection):and (this:Count:eq other:Count))
                (with true (for item in other
                    (if (this:has item)
                        (continue true)
                     else
                        (break false)
    -)
    #
    (:has_any  (= (! item *) ?bool
        (with true (for item in args
            (if (this:has item)
                (break true)
             else
                (continue false)
    -)
    #
    (:cas  (= (! item value) ?collection
        (if (value:is item)
            (return this)
        else
            ((this:remove item):$put value)
    -)
    #
    ($cas  (= (! item value) ?collection
        (if (value:is item)
            (return this)
        else
            ((this:remove item):put value)
    -)
    #
    ($join  (= (! iter:iterator *) ?collection
        (with this
            (foreach iter in args
                (foreach item in iter
                    (last:put item)
    -)
    #
    (:triage  (= (! func:function *) ?(collection *) (*
        (decl groups (collect
            (foreach func in args (this:clear -)
        -)
        (foreach item in this
            (for (index group) in groups
                (if ((argv index) item) (* 
                    ($groups:cas index group (group:$put item -) 
                    (break )
        -)
        (return groups)
    -)
    #
    (:assort  (= (! func:function *) ?(collection *)
        (collect (foreach func in args
            (with (this:clear ) 
                (foreach item in this
                    (if (func item)
                        (last:put item)
                    else
                        (continue )
    -)
);
#
###############################################################################
