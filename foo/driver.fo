#!(generic "foo")
###############################################################################
# driver.fo
#
# The Programmer - Leevi, @2012-06-24. Happy Birthday. Updated @2013-02-17.
# C-Lab, Nirl Studio 2011-2013, All Rights Reserved.
#
###############################################################################
# 0, to define generic operations of 'driver'.
(impl driver
    # 1, construction of instance.
    # 1.0, a member function with the same name of 'driver' is the constructor.
    # 1.1, a constructor will return a new instance when to be evaluated.
    # 1.2, the 'driver:driver' will be automatically invoked for all its decendants.
    # 1.3, a 'driver' without a constructor can be instantiated.
    (driver (= ?device ,
    #
    # 1, testing for an instance.
    # 1.0, 'version' returns an interger version value for the driver.
    (Version ?real ,
    # 1.1, 'is_device' to test whether an entity is an instance of the given driver.
    # 1.2, if 'type' is 'null', it will just test for whether it's an instance.
    (is_device (= (! type:driver) ?bool ,
    #
    # 2, protected instance members.
    # 2.0, ':_is_valid' can be used to implement the test of validity.
    # 2.1, ':_is_valid' will be automatically invoked by 'device:is_valid'.
    (:_is_valid (= ?bool ,
    # 2.1, ':_close' can be used to implement resouce releasing process.
    # 2.2, ':_close' will be automatically invoked by 'device:close'.
    (:_close (= ?null ,
) ;
###############################################################################
