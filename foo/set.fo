#!(generic "foo")
###############################################################################
# set.fo
#
# The Programmer - Leevi, @2012-06-24. Happy Birthday.
# C-Lab, Nirl Studio 2011-2013, All Rights Reserved.
#
###############################################################################
# 0, to define and implement operations of 'set'.
(impl set
    # 1, the constructors of 'set'.
    # 1.0, 'set' will produce an instance including all items in arguments.
    (set (= (! item *) ?set -)
    # 1.1, 'of' will produce an instance basing one or more iterable entity.
    # 1.2, 'items' should be an 'iterable' entity or an 'iterator'.
    (of (= (! items:iterator|iterable *) ?set -)
    #
    # 2, testing and query operations.
    # 2.0, ':contain' tests for whether the 'set' is the superset of 'subset'.
    # 2.1, ':contain' will test for proper subset relationship if 'is_proper' is 'true'.
    (:contain (= (! subset:set is_proper:bool) ?bool -)
    # 2.2, ':intersected' tests for whether there is a non-empty intersection..
    (:intersected (! other:set *) ?bool -)
    #
    # 3, incremental operations.
    # 3.0, ':intersect' produces the intersection between 'set' and others.
    (:intersect (= (! other:set *) ?set -)
    # 3.1, ':substract' produces the complementary set of others to 'set'.
    (:subtract (= (! other:set *) ?set -)
    #
    # 4, local-replacing operations.
    # 4.0, '$intersect' is the local-replacing version of ':intersect'.
    ($intersect (= (! other:set *) ?bool -)
    # 4.1, '$substract' is the local-replacing version of ':substract'.
    ($subtract (= (! other:set *) ?bool -)
) ;
###############################################################################
# 5, to define a shortcut function for 'set:of'.
(decl set_of set:of)
###############################################################################
