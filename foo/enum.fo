#!(generic "foo")
###############################################################################
# enum.fo
#
# The Programmer - Leevi, @2012-06-24. Happy Birthday. Updated @2013-02-03.
# C-Lab, Nirl Studio 2011-2013, All Rights Reserved.
#
###############################################################################
# 0, to implement some generic operations of 'enum'.
(impl enum
    # 1, operations for discrete values.
    # 1.0, 'Names' is a set of names of all valid values.
    (Names ?set) , 
    # 1.1, 'Values' is a series of all valid values of integer.
    (Values ?series) , 
    #
    # 2, operations for discrete values.
    # 2.0, to convert a valid value to its name.
    # 2.1, an invalid value will be converted to an empty string.
    (to_name  (= (! value:enum) ?string ,
    # 2.2, to convert a valid name to its value.
    # 2.3, an invalid name will be converted to an integer zero.
    (to_value (= (! name:string) ?enum ,
    #
    # 3, opeations for mask values.
    # 3.0, to convert a masked value to a list of names.
    # 3.1, an invalid value will be ignored in converting process.
    (to_names  (= (! values:enum) ?array, 
    # 3.2, to convert a list of names to a masked value.
    # 3.3, an invalid name will be ignored in convertion.
    (to_values (= (! names:iterator|iterable) ?enum , 
) ;
###############################################################################
